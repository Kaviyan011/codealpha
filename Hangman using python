import random



# List of words to choose from

word_list = ["python", "hangman", "computer", "programming", "developer", "algorithm", "code"]



# Function to display the current state of the word

def display_word(word, guessed_letters):

    return ''.join([letter if letter in guessed_letters else '_' for letter in word])



# Function to show the current hangman state based on incorrect guesses

def display_hangman(incorrect_guesses):

    hangman_states = [

        '''

           -----

           |   |

               |

               |

               |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

               |

               |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

           |   |

               |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

          /|   |

               |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

          /|\\  |

               |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

          /|\\  |

          /    |

               |

        =========

        ''',

        '''

           -----

           |   |

           O   |

          /|\\  |

          / \\  |

        =========

        '''

    ]

    print(hangman_states[incorrect_guesses])



# Function to play the Hangman game

def play_hangman():

    word = random.choice(word_list)

    guessed_letters = set()

    incorrect_guesses = 0

    max_incorrect_guesses = 6  # The player has 6 incorrect guesses before losing

    

    print("Welcome to Hangman!")

    print(f"The word has {len(word)} letters.")

    

    while incorrect_guesses < max_incorrect_guesses:

        # Display the current hangman state and the word with guessed letters revealed

        display_hangman(incorrect_guesses)

        print("\nWord to guess: ", display_word(word, guessed_letters))

        print(f"Incorrect guesses left: {max_incorrect_guesses - incorrect_guesses}")

        

        # Get player's guess

        guess = input("Guess a letter: ").lower()

        

        # Check if the guess is valid

        if len(guess) != 1 or not guess.isalpha():

            print("Please enter a valid single letter.")

            continue

        

        # Check if the letter has already been guessed

        if guess in guessed_letters:

            print("You've already guessed that letter!")

            continue

        

        guessed_letters.add(guess)

        

        # Check if the guess is correct

        if guess in word:

            print(f"Good guess! The letter '{guess}' is in the word.")

        else:

            incorrect_guesses += 1

            print(f"Oops! The letter '{guess}' is not in the word.")

        

        # Check if the player has guessed the word correctly

        if all(letter in guessed_letters for letter in word):

            print(f"Congratulations! You've guessed the word: {word}")

            break

    else:

        print(f"Sorry, you've run out of guesses. The word was: {word}")



# Function to ask if the player wants to play again

def ask_to_play_again():

    play_again = input("Do you want to play again? (y/n): ").lower()

    return play_again == "y"



# Run the game

if __name__ == "__main__":

    while True:

        play_hangman()

        if not ask_to_play_again():

            print("Thanks for playing!")

            break
